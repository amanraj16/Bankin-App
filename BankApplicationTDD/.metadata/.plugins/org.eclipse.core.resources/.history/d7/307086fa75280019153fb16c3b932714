package com.capgemini.service;

import com.capgemini.beans.Account;
import com.capgemini.exceptions.InsufficientBalanceException;
import com.capgemini.exceptions.InsufficientOpeningBalanceException;
import com.capgemini.exceptions.InvalidAccountNumberException;
import com.capgemini.repo.AccountRepo;

public class AccountServiceImpl implements AccountService {
	AccountRepo accountRepo;
	public AccountServiceImpl(AccountRepo accountRepo) {
		super();
		this.accountRepo = accountRepo;
	}
	@Override
	public Account createAccount(int accountNumber, int amount) throws InsufficientOpeningBalanceException {
		Account account=accountRepo.searchAccount(accountNumber);
		if(account.getAmount()<500)
			throw new InsufficientOpeningBalanceException();
		else
		{
		account.setAccountNumber(accountNumber);
		account.setAmount(amount);
		if(accountRepo.save(account))
			return account;
		}
		return null;
	}
	public int depositAmount(int accountNumber,int amount)throws InvalidAccountNumberException
	{
		Account account=accountRepo.searchAccount(accountNumber);
		if(account==null)
		{
			System.out.println("From if statement");
			throw new InvalidAccountNumberException();
		}
		account.setAmount(account.getAmount()+amount);
		accountRepo.save(account);
		System.out.println("After save");
		return account.getAmount();
	}
	@Override
	public int withdrawAmount(int accountNumber,int amount)throws InsufficientBalanceException,InvalidAccountNumberException
	{
		Account account=accountRepo.searchAccount(accountNumber);
		if(account==null)
			throw new InvalidAccountNumberException();
		if(account.getAmount()<amount)
		{
			throw new InsufficientBalanceException();
		}
		account.setAmount(account.getAmount()-amount);
		accountRepo.save(account);
		return account.getAmount();
	}
}
