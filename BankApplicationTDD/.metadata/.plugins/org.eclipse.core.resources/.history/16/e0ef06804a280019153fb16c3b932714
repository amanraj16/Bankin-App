package com.capgemini.service;

import java.util.LinkedList;

import com.capgemini.beans.Account;
import com.capgemini.exceptions.InsufficientBalanceException;
import com.capgemini.exceptions.InsufficientOpeningBalanceException;
import com.capgemini.exceptions.InvalidAccountNumberException;
import com.capgemini.repo.AccountRepo;

public class AccountServiceImpl implements AccountService {
	LinkedList<Account> ac=new LinkedList<>();
	AccountRepo accountRepo;
	public AccountServiceImpl(AccountRepo accountRepo) {
		super();
		this.accountRepo = accountRepo;
	}
	@Override
	public Account createAccount(int accountNumber, int amount) throws InsufficientOpeningBalanceException {
		if(amount<500)
			throw new InsufficientOpeningBalanceException("Opening Balance should be greater than or equal to 500");
		Account account=new Account();
		account.setAccountNumber(accountNumber);
		account.setAmount(amount);
		if(accountRepo.save(account))
			return account;
		return null;
	}
	private Account searchAccount(int accountNumber)throws InvalidAccountNumberException
	{
		for(Account account:ac)
		{
			if(account.getAccountNumber()==accountNumber)
				return account;
		}
		throw new InvalidAccountNumberException("Account Number doesn't exist");
	}
	
	public String depositAmount(int accountNumber,int amount)throws InvalidAccountNumberException
	{
		Account account=searchAccount(accountNumber);
		account.setAmount(account.getAmount()+amount);
		return "Updated Balance of Account Number "+account.getAccountNumber()+" is = "+account.getAmount();
	}
	public String withdrawAmount(int accountNumber,int amount)throws InvalidAccountNumberException,InsufficientBalanceException
	{
		Account account=searchAccount(accountNumber);
		if((account.getAmount()-amount)>=500)
		{
			account.setAmount(account.getAmount()-amount);
			return "Updated Balance of Account Number "+account.getAccountNumber()+" is = "+account.getAmount();
		}
		throw new InsufficientBalanceException("Remaining Balance should not be less than 500");
	}

}
